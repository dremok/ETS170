/*
Generates HTML from model m according to the following template.
*/

def mainTask(i: Int): Model = for (
	(Key(entity,edge), nodes) <- m
		if nodes exists {
			case Label(l) => l contains ("maintask"+i)
			case _ => false
		}
	) yield (Key(entity,edge), nodes)
	
def variants(i: Int): Model = for (
	(Key(entity,edge), nodes) <- m
		if nodes exists {
			case Label(l) => l contains ("variant"+i)
			case _ => false
		}
	) yield (Key(entity,edge), nodes)

val myTemplate = DocumentTemplate( 
	"Requirements Document", 
	Text("Generated by " + 
	  " <a href=\"http://reqT.org\">reqT.org</a> " + 
	  ( new java.util.Date ) ), 
	Chapter("Context", Text("System context"), m => (m / Context) \ Stakeholder),
	Chapter("Stakeholders", Text(""), m => m / Stakeholder),
	Chapter("Goals", Text(""), m => m / Goal),
	Chapter("Tasks", Text("Tasks to be supported"), m => m / hurts),
	Chapter("", Text(""), m => mainTask(1) - Label(mainTask(1) !! Label)),
	Chapter("", Text(""), m => variants(1) - Label(variants(1) !! Label)),
	Chapter("", Text(""), m => mainTask(2) - Label(mainTask(2) !! Label)),
	Chapter("", Text(""), m => variants(2) - Label(variants(2) !! Label))
)

m.toHtml(myTemplate).save("reqDoc.html")