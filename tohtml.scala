/*
Generates HTML from model m according to the following template.
*/

def mWithoutLabels(mIn: Model) = mIn collect { 
		case (k,NodeSet(ns)) => (k, NodeSet(ns collect { case n if !(n <==> Label) => n }))
	}

def mainTask(i: Int): Model = for (
	(Key(entity,edge), nodes) <- (m / Task)
		if nodes exists {
			case Label(l) => l contains ("maintask"+i)
			case _ => false
		}
	) yield (Key(entity,edge), nodes)
	
def subtasks(i: Int): Model = for (
	(Key(entity,edge), nodes) <- (m / Task)
		if nodes exists {
			case Label(l) => l contains ("subtask"+i)
			case _ => false
		}
	) yield (Key(entity,edge), nodes)

def variants(i: Int): Model = for (
	(Key(entity,edge), nodes) <- (m/ Task)
		if nodes exists {
			case Label(l) => l contains ("variant"+i)
			case _ => false
		}
	) yield (Key(entity,edge), nodes)
	
val myTemplate = DocumentTemplate( 
	"Requirements Document", 
	Text("Generated by " + 
	  " <a href=\"http://reqT.org\">reqT.org</a> " + 
	  ( new java.util.Date ) ), 
	Chapter("Context", Text("System context"), m => (m / Context) \ Stakeholder),
	Chapter("Stakeholders", Text(""), m => m / Stakeholder),
	Chapter("Goals", Text(""), m => m / Goal),
	Chapter("Tasks to be supported", Text("<b>R1. The product shall support the following tasks:</b>"), m => m / hurts), // Skickar in tom modell eftersom jag inte vet hur man gör rubriker
	// Task descriptions
	Section("", Text(""), m => mWithoutLabels(mainTask(1))),
	Section("Sub-tasks:", Text(""), m => mWithoutLabels(subtasks(1))),
	Section("Variants:", Text(""), m => mWithoutLabels(variants(1))),
	Section("", Text("<hr>"), m => m / hurts),
	Section("", Text(""), m => mWithoutLabels(mainTask(2))),
	Section("Sub-tasks:", Text(""), m => mWithoutLabels(subtasks(2))),
	Section("Variants:", Text(""), m => mWithoutLabels(variants(2)))
)

m.toHtml(myTemplate).save("reqDoc.html")